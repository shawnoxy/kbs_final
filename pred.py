# -*- coding: utf-8 -*-
"""heart_deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cMSGGxK_7Y7VUzzPCNHHHbYCfpdKakOC

# Heart Disease Prediction Project by:

> Shawn Dhave R1710758

> Brendon Shumba R1713410

> Prince D Mujee R178471G

## Importing The Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from keras import regularizers



"""## Importing The Dataset
We got this dataset on the University of California, Irvine Machine Learning Repository. URL: 

http://archive.ics.uci.edu/ml/datasets/Heart+Disease

This dataset contains patient data concerning heart disease diagnosis that was collected at several locations around the world. There are 76 attributes, including age, sex, resting blood pressure, cholestoral levels, echocardiogram data, exercise habits, and many others. To data, all published studies using this data focus on a subset of 14 attributes - so we will do the same. More specifically, we will use the data collected at the Cleveland Clinic Foundation.

The "goal" field refers to the presence of heart disease in the patient.

### Attribute Information



1.   Age: displays the age of the individual.
2.   Sex: displays the gender of the individual using the following format :
1 = male,
0 = female
3. Chest-pain type: displays the type of chest-pain experienced by the individual using the following format :
1 = typical angina,
2 = atypical angina,
3 = non — anginal pain,
4 = asymptotic
4. Resting Blood Pressure: displays the resting blood pressure value of an individual in mmHg (unit)
5. Serum Cholestrol: displays the serum cholesterol in mg/dl (unit)
6. Fasting Blood Sugar: compares the fasting blood sugar value of an individual with 120mg/dl.
If fasting blood sugar > 120mg/dl then : 1 (true)
else : 0 (false)
7. Resting ECG : displays resting electrocardiographic results
0 = normal,
1 = having ST-T wave abnormality,
2 = left ventricular hyperthrophy
8.  Max heart rate achieved : displays the max heart rate achieved by an individual.
9. Exercise induced angina :
1 = yes,
0 = no
10. ST depression induced by exercise relative to rest: displays the value which is an integer or float.
11. Peak exercise ST segment :
1 = upsloping,
2 = flat,
3 = downsloping
12. Number of major vessels (0–3) colored by flourosopy : displays the value as integer or float.
13. Thal : displays the thalassemia :
1 = normal,
2 = fixed defect,
3 = reversible defect

# Data Preprocessing
"""
def heart_pred(values):
    dataset = pd.read_csv('heart.csv')

    #Cleaning data

    dataset = dataset[~dataset.isin(['?'])]
    dataset = dataset.dropna(axis=0)
    dataset = dataset.apply(pd.to_numeric)
    dataset.describe()

    #Splitting the dataset into a matrix of features and a vector of the dependant variable
    X = dataset.iloc[:, :-1].values
    y = dataset.iloc[:, -1].values

    """### One Hot Encoding the columns"""

    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder
    ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [2, 6, 10, 11, 12])], remainder='passthrough')
    X = np.array(ct.fit_transform(X))

    from sklearn.model_selection import train_test_split
    X_train1, X_test1, y_train1, y_test1 = train_test_split(X, y, test_size=0.2, random_state=42)

    from sklearn.preprocessing import StandardScaler
    sc = StandardScaler()
    X_train1 = sc.fit_transform(X_train1)
    X_test1 = sc.transform(X_test1)

    ann1 = tf.keras.models.Sequential()

    from keras import regularizers
    from keras.layers import Dropout
    ann1 = tf.keras.models.Sequential()
    ann1.add(tf.keras.layers.Dense(units=32, kernel_regularizer=regularizers.l2(0.001), activation='relu'))
    ann1.add(Dropout(0.25))
    ann1.add(tf.keras.layers.Dense(units=16, kernel_regularizer=regularizers.l2(0.001), activation='relu'))
    ann1.add(Dropout(0.25))
    ann1.add(tf.keras.layers.Dense(units=8, kernel_regularizer=regularizers.l2(0.001), activation='relu'))
    ann1.add(Dropout(0.25))
    ann1.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

    ann1.compile(optimizer = 'rmsprop', loss='binary_crossentropy', metrics = ['accuracy'])

    history1 = ann1.fit(X_train1, y_train1, validation_data=(X_test1, y_test1), batch_size=10, epochs=100)
   
    return ann1.predict([[-0.91287093, -0.45164156, -0.6636838, 3.63803438, 1.07736451, -1.0422125, -0.12964074, -0.25705893, 1.09544512, -0.96747093, 0.82495791, -0.52955007, -0.34694433, -0.26607604, -0.11203705, -0.06441566, -0.24779731, -1.15192147, 1.31114497, 0.49395376, 0.72250438, 2.36038903, 0.78117172, -0.38330071, 0.39828883, -0.67663234, -0.73909479]])

    # y_pred1 = ann1.predict([[-0.91287093, -0.45164156, -0.6636838, 3.63803438, 1.07736451, -1.0422125, -0.12964074, -0.25705893, 1.09544512, -0.96747093, 0.82495791, -0.52955007, -0.34694433, -0.26607604, -0.11203705, -0.06441566, -0.24779731, -1.15192147, 1.31114497, 0.49395376, 0.72250438, 2.36038903, 0.78117172, -0.38330071, 0.39828883, -0.67663234, -0.73909479]])
    # y_pred1 > 0.5

    